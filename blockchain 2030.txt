import hashlib
import time
import json
import random
import socket
import threading
import os
import psutil
import tkinter as tk
from tkinter import messagebox, scrolledtext
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class Block:
    def __init__(self, index, previous_hash, timestamp, transactions, difficulty):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.transactions = transactions
        self.nonce = 0
        self.difficulty = difficulty
        self.hash = self.mine_block()

    def compute_hash(self):
        block_data = json.dumps({
            "index": self.index,
            "previous_hash": self.previous_hash,
            "timestamp": self.timestamp,
            "transactions": self.transactions,
            "nonce": self.nonce,
            "difficulty": self.difficulty
        }, sort_keys=True)
        return hashlib.sha256(block_data.encode()).hexdigest()

    def mine_block(self):
        if not self.is_cpu_only():
            print("Mineração bloqueada para ASICs e GPUs!")
            return None
        
        while True:
            self.hash = self.compute_hash()
            if self.hash.startswith('0' * self.difficulty):
                return self.hash
            self.nonce += 1

    def is_cpu_only(self):
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent']):
            if any(keyword in proc.info['name'].lower() for keyword in ["cuda", "nvidia", "amd", "asic"]):
                return False
        return True

class Blockchain:
    def __init__(self):
        self.difficulty = 4
        self.chain = [self.create_genesis_block()]
        self.pending_transactions = []
        self.mining_reward = 50  # Dharma Lovers (DLS Coin) recompensa inicial
        self.tokens = {}
        self.contracts = {}
        self.halving_interval = 210000
        self.block_time_target = 10
        self.last_block_time = time.time()

    def create_genesis_block(self):
        return Block(0, "0", int(time.time()), [], self.difficulty)

    def adjust_difficulty(self):
        if len(self.chain) % 10 == 0:
            current_time = time.time()
            time_taken = current_time - self.last_block_time
            self.last_block_time = current_time
            
            if time_taken < self.block_time_target:
                self.difficulty += 1
            elif time_taken > self.block_time_target:
                self.difficulty = max(1, self.difficulty - 1)

    def apply_halving(self):
        if len(self.chain) % self.halving_interval == 0:
            self.mining_reward = max(1, self.mining_reward // 2)

    def add_block(self, miner_address):
        previous_block = self.chain[-1]
        self.pending_transactions.append({"from": "network", "to": miner_address, "amount": self.mining_reward})
        new_block = Block(len(self.chain), previous_block.hash, int(time.time()), self.pending_transactions, self.difficulty)
        if new_block.hash is not None:
            self.chain.append(new_block)
            self.pending_transactions = []
            self.adjust_difficulty()
            self.apply_halving()
        return new_block

class Wallet:
    def __init__(self, owner):
        self.owner = owner
        self.balance = 0

    def receive_funds(self, amount):
        self.balance += amount

    def send_funds(self, blockchain, recipient, amount):
        if self.balance >= amount:
            blockchain.pending_transactions.append({"from": self.owner, "to": recipient, "amount": amount})
            self.balance -= amount
        else:
            print("Saldo insuficiente!")
    
    def mine_block(self, blockchain):
        block = blockchain.add_block(self.owner)
        if block.hash is not None:
            self.receive_funds(blockchain.mining_reward)
            return block.index, block.hash
        return None

class WalletGUI:
    def __init__(self, wallet, blockchain):
        self.wallet = wallet
        self.blockchain = blockchain
        self.root = tk.Tk()
        self.root.title("DLS Coin - Painel de Controle")
        self.root.geometry("800x600")
        self.root.configure(bg='black')

        tk.Label(self.root, text=f"Carteira: {wallet.owner}", fg='cyan', bg='black', font=("Arial", 14)).pack(pady=10)
        self.balance_label = tk.Label(self.root, text=f"Saldo: {wallet.balance} DLS", fg='lime', bg='black', font=("Arial", 12))
        self.balance_label.pack(pady=5)
        
        self.canvas_frame = tk.Frame(self.root, bg='black')
        self.canvas_frame.pack()
        self.update_graph()
        
        self.block_explorer = scrolledtext.ScrolledText(self.root, width=80, height=10, bg='black', fg='white')
        self.block_explorer.pack(pady=5)
        self.update_block_explorer()

        tk.Button(self.root, text="Iniciar Mineração", command=self.start_mining, bg='darkblue', fg='white').pack(pady=5)
        tk.Button(self.root, text="Parar Mineração", command=self.stop_mining, bg='darkred', fg='white').pack(pady=5)
        tk.Button(self.root, text="Sair", command=self.root.quit, bg='gray', fg='white').pack(pady=5)
        
        self.root.mainloop()

    def start_mining(self):
        self.wallet.mine_block(self.blockchain)
        self.update_graph()
        self.update_block_explorer()
        messagebox.showinfo("Mineração", "Mineração iniciada!")

    def stop_mining(self):
        messagebox.showinfo("Mineração", "Mineração parada!")

    def update_graph(self):
        fig, ax = plt.subplots(figsize=(4, 2))
        ax.plot([block.index for block in self.blockchain.chain], [block.difficulty for block in self.blockchain.chain], marker='o', color='lime')
        ax.set_title("Histórico de Dificuldade")
        ax.set_xlabel("Blocos")
        ax.set_ylabel("Dificuldade")
        canvas = FigureCanvasTkAgg(fig, master=self.canvas_frame)
        canvas.get_tk_widget().pack()
        canvas.draw()
    
    def update_block_explorer(self):
        self.block_explorer.delete('1.0', tk.END)
        for block in self.blockchain.chain:
            self.block_explorer.insert(tk.END, f"Bloco {block.index} | Hash: {block.hash[:20]}... | Transações: {len(block.transactions)}\n")

blockchain = Blockchain()
wallet_miner = Wallet("Miner1")
WalletGUI(wallet_miner, blockchain)

